package com.amazon.lambda.blink.tododemo;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig.TableNameOverride;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;


@DynamoDBTable(tableName = "TodoItem")
public class TodoItem {

    private static final String TODO_TABLE_NAME = System.getenv("TODO_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private String id;
    private String text;
    private Boolean completed;

    public TodoItem() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(TableNameOverride.withTableNameReplacement(TODO_TABLE_NAME))
                .build();
        
        // get the db adapter
        TodoItem.db_adapter = DynamoDBAdapter.getInstance();
        this.client = TodoItem.db_adapter.getDbClient();
        this.mapper = TodoItem.db_adapter.createDbMapper(mapperConfig);
    }

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    @DynamoDBAttribute(attributeName = "text")
    public String getText() {
        return text;
    }

    @DynamoDBAttribute(attributeName = "completed")
    public Boolean getCompleted() {
        return completed;
    }

    public void setId(String id) {
        this.id = id;
    }

    public void setText(String text) {
        this.text = text;
    }

    public void setCompleted(Boolean completed) {
        this.completed = completed;
    }

    public String toString() {
        return String.format("{id: %s, text: %s, completed: %s}", id, text, completed);
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(TODO_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public List<TodoItem> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<TodoItem> results = this.mapper.scan(TodoItem.class, scanExp);
        for (TodoItem item : results) {
            System.out.println(item.toString());
        }
        return results;
    }

    public TodoItem get(String id) throws IOException {
        // query by id
        HashMap<String, AttributeValue> eav = new HashMap<String, AttributeValue>();
        eav.put(":val1", new AttributeValue().withS(id));
        DynamoDBQueryExpression<TodoItem> queryExp = new DynamoDBQueryExpression<TodoItem>()
                .withKeyConditionExpression("id = :val1")
                .withExpressionAttributeValues(eav);
        List<TodoItem> results = this.mapper.query(TodoItem.class, queryExp);
        if (results.size() == 0) {
            System.out.println("No todo item found with that id");
            return null;
        }

        for (TodoItem item : results) {
            System.out.println(item.toString());
        }
        return results.get(0);
    }

    public void save(TodoItem item) throws IOException {
        this.mapper.save(item);
    }

    public void delete(String id) throws IOException {
        TodoItem item = this.get(id);
        if (item != null)
            this.mapper.delete(item);
    }
}